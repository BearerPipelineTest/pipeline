go_library(
    name = "workflow",
    srcs = glob(["*.go"], exclude = ["*_test.go"]),
    visibility = ["PUBLIC"],
    deps = [
        "//internal/cluster/clustersetup",
        "//internal/cluster/workflow",
        "//internal/pke",
        "//internal/pke/workflow",
        "//internal/providers/azure",
        "//internal/providers/azure/pke",
        "//internal/providers/pke/pkeworkflow",
        "//internal/providers/pke/pkeworkflow/pkeworkflowadapter",
        "//pkg/brn",
        "//pkg/cluster",
        "//pkg/cluster/pke",
        "//pkg/providers/azure",
        "//src/cluster",
        "//third_party/go:emperror.dev_errors",
        "//third_party/go:github.com_Azure_azure-sdk-for-go",
        "//third_party/go:github.com_Azure_go-autorest_autorest",
        "//third_party/go:github.com_Azure_go-autorest_autorest_to",
        "//third_party/go:go.uber.org_cadence",
        "//third_party/go:go.uber.org_zap",
        "//third_party/go:logur.dev_adapter_zap",
        "//third_party/go:logur.dev_logur",
    ],
)

go_test(
    name = "test",
    srcs = glob(["*.go"]),
    deps = [
        "//internal/cluster/clustersetup",
        "//internal/cluster/workflow",
        "//internal/pke",
        "//internal/pke/workflow",
        "//internal/providers/azure",
        "//internal/providers/azure/pke",
        "//internal/providers/pke/pkeworkflow",
        "//internal/providers/pke/pkeworkflow/pkeworkflowadapter",
        "//pkg/brn",
        "//pkg/cluster",
        "//pkg/cluster/pke",
        "//pkg/providers/azure",
        "//src/cluster",
        "//third_party/go:emperror.dev_errors",
        "//third_party/go:github.com_Azure_azure-sdk-for-go",
        "//third_party/go:github.com_Azure_go-autorest_autorest",
        "//third_party/go:github.com_Azure_go-autorest_autorest_to",
        "//third_party/go:github.com_stretchr_testify",
        "//third_party/go:go.uber.org_cadence",
        "//third_party/go:go.uber.org_zap",
        "//third_party/go:logur.dev_adapter_zap",
        "//third_party/go:logur.dev_logur",
    ],
)
